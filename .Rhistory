start_index <- grep("Mass", colnames(proteomics_raw))
end_index <- grep("Coefficient", colnames(proteomics_raw)) - 1
colnames(proteomics_raw) <- proteomics_raw[1,]
proteomics_all <- proteomics_raw[2:nrow(proteomics_raw),]
gene_ids <- proteomics_raw$Bnumber
proteomics_masses <- proteomics_all[, start_index:end_index]
proteomics_masses[] <- lapply(proteomics_masses, as.numeric)
proteomics_masses$Bnumber <- proteomics_all$Bnumber
selected_conditions <- c("Glucose", "Acetate", "Fumarate", "Glucosamine",
"Glycerol", "Pyruvate", "Chemostat 0.5", "Chemostat 0.35",
"Chemostat 0.20", "Chemostat 0.12", "Xylose", "Mannose",
"Galactose ", "Succinate", "Fructose")
proteomics <- proteomics_masses[,selected_conditions]
proteomics <- proteomics %>%
group_by(proteomics_masses$Bnumber) %>%
summarise_all(list(sum=sum))
proteomics <- data.frame(proteomics)
rownames(proteomics) <- proteomics$`proteomics_masses.Bnumber`
proteomics <- proteomics[,2:ncol(proteomics)]
colnames(proteomics) <- selected_conditions
annotation <- read.csv("../data/ecoli_kegg_annotation.csv")
growth_rates <-  metadata[colnames(proteomics), "Growth.rate..h.1."]
volumes <- metadata[colnames(proteomics), "Single.cell.volume..fl.1"]
for(col in c("X0", "X1", "X2")){
new_col <- c()
for(row in 1:nrow(annotation)){
split <- unlist(strsplit(annotation[row, col], "', '"))
chosen <- split[sample.int(length(split), 1)] # select random group if there are multiple
new_col <- c(new_col, trimws(gsub("[^a-zA-Z \\s]", "", chosen)))
}
annotation[, col] <- new_col
}
get_sector_fraction <- function(targets, proteomics, annotation, level){
sector_sum <- data.frame()
for (target in targets){
target_rows <- annotation$X[annotation[level] == target]
target_sums <- colSums(proteomics[target_rows, ], na.rm = TRUE)
sector_sum <- rbind(sector_sum, target_sums)
}
summed_groups <- colSums(sector_sum, na.rm=TRUE)
fractions <- summed_groups/colSums(proteomics, na.rm=TRUE)
names(fractions) <- colnames(proteomics)
return(fractions)
}
plot_and_fit <- function(data, growth_rates, ylim, ylab, xlab){
if(length(data) > 8){
print("Too many groups")
return()
}
colors <- brewer.pal(8, "Dark2")
for(i in seq_along(data)){
group_data <- data[[names(data)[i]]]
plot(growth_rates, group_data, col = colors[i], pch=20, ylim=ylim, cex=1.5,
ylab = ylab, xlab = xlab, cex.lab = 1.3)
abline(lm(group_data~growth_rates), col = colors[i])
par(new=TRUE)
}
legend("topleft",
legend = names(data),
col = colors[1:length(data)], pch=20, cex=1.3)
par(new=FALSE)
}
##### Translation & ribosomal proteins ######
met <- get_sector_fraction(c("Metabolism"), proteomics, annotation, "X0")
info <- get_sector_fraction(c("Genetic Information Processing"), proteomics, annotation, "X0")
sectors <- list("Metabolism" = met,
"Genetic Information Processing" = info)
plot_and_fit(sectors,
growth_rates,
ylim = c(0,0.6),
ylab = "Proteome fraction",
bquote("Growth rate"~ mu ~ (h^-1)))
translation <- get_sector_fraction(c("Translation", "Folding sorting and degradation"), proteomics, annotation, "X1")
ribosomes <- get_sector_fraction(c("Ribosome PATHeco"), proteomics, annotation, "X2")
trna_synthetases <- get_sector_fraction(c("AminoacyltRNA biosynthesis PATHeco"), proteomics, annotation, "X2")
sectors <- list("Translation" = translation-trna_synthetases,
"Ribosomal proteins" = ribosomes,
"tRNA synthetases" = trna_synthetases)
plot_and_fit(sectors,
growth_rates,
ylim = c(0,0.4),
ylab = "Proteome fraction",
bquote("Growth rate"~ mu ~ (h^-1)))
library(RColorBrewer)
library(here)
directory <- paste0(here(), "/code")
setwd(directory)
metadata <- read.csv("../data/EV3-Samples-2.csv")
c_lim_samples <- metadata[8:22,]
proteomics <- read.csv("../data/EV9-AbsoluteMassFractions-2.csv")
proteomics <- proteomics[proteomics$Gene.locus != "", ]
rownames(proteomics) <- proteomics$Gene.locus
# drops <- c("Gene.name", "Gene.locus", "Protein.ID")
# proteomics <- proteomics[ , !(names(proteomics) %in% drops)]
proteomics <- proteomics[, c_lim_samples$Sample.ID]
annotation <- read.csv("../data/ecoli_kegg_annotation.csv")
for(col in c("X0", "X1", "X2")){
new_col <- c()
for(row in 1:nrow(annotation)){
split <- unlist(strsplit(annotation[row, col], "', '"))
chosen <- split[sample.int(length(split), 1)] # select random group if there are multiple
new_col <- c(new_col, trimws(gsub("[^a-zA-Z \\s]", "", chosen)))
}
annotation[, col] <- new_col
}
get_sector_fraction <- function(targets, proteomics, annotation, level){
sector_sum <- data.frame()
for (target in targets){
target_rows <- annotation$X[annotation[level] == target]
target_sums <- colSums(proteomics[target_rows, ], na.rm = TRUE)
sector_sum <- rbind(sector_sum, target_sums)
}
summed_groups <- colSums(sector_sum, na.rm=TRUE)
fractions <- summed_groups/colSums(proteomics, na.rm=TRUE)
names(fractions) <- colnames(proteomics)
return(fractions)
}
plot_and_fit <- function(data, growth_rates, ylim, ylab, xlab){
if(length(data) > 8){
print("Too many groups")
return()
}
colors <- brewer.pal(8, "Dark2")
for(i in seq_along(data)){
group_data <- data[[names(data)[i]]]
plot(growth_rates, group_data, col = colors[i], pch=20, ylim=ylim, cex=1.5,
ylab = ylab, xlab = xlab, cex.lab = 1.3)
abline(lm(group_data~growth_rates), col = colors[i])
par(new=TRUE)
}
legend("topleft",
legend = names(data),
col = colors[1:length(data)], pch=20, cex=1.3)
par(new=FALSE)
}
met <- get_sector_fraction(c("Metabolism"), proteomics, annotation, "X0")
info <- get_sector_fraction(c("Genetic Information Processing"), proteomics, annotation, "X0")
sectors <- list("Metabolism" = met,
"Genetic Information Processing" = info)
plot_and_fit(sectors,
c_lim_samples$Growth.rate..1.h.,
ylim = c(0,0.5),
ylab = "Proteome fraction",
bquote("Growth rate"~ mu ~ (h^-1)))
translation <- get_sector_fraction(c("Translation", "Folding sorting and degradation"), proteomics, annotation, "X1")
ribosomes <- get_sector_fraction(c("Ribosome PATHeco"), proteomics, annotation, "X2")
trna_synthetases <- get_sector_fraction(c("AminoacyltRNA biosynthesis PATHeco"), proteomics, annotation, "X2")
sectors <- list("Translation" = translation-trna_synthetases,
"Ribosomal proteins" = ribosomes,
"tRNA synthetases" = trna_synthetases)
plot_and_fit(sectors,
c_lim_samples$Growth.rate..1.h.,
ylim = c(0,0.4),
ylab = "Proteome fraction",
bquote("Growth rate"~ mu ~ (h^-1)))
carbs <- get_sector_fraction(c("Carbohydrate metabolism"), proteomics, annotation, "X1")
energy <- get_sector_fraction(c("Ribosome PATHeco"), proteomics, annotation, "X2")
sectors <- list("Carbohydrate metabolism" = carbs,
"Energy metabolism" = energy)
plot_and_fit(sectors,
c_lim_samples$Growth.rate..1.h.,
ylim = c(0,0.3),
ylab = "Proteome fraction",
bquote("Growth rate"~ mu ~ (h^-1)))
aas <- get_sector_fraction(c("Amino acid metabolism"), proteomics, annotation, "X1")
nts <- get_sector_fraction(c("Nucleotide metabolism"), proteomics, annotation, "X1")
aas
sectors <- list("Amino acid metabolism" = aas,
"Nucleotide metabolism" = nts)
plot_and_fit(sectors,
c_lim_samples$Growth.rate..1.h.,
ylim = c(0,0.10),
ylab = "Proteome fraction",
bquote("Growth rate"~ mu ~ (h^-1)))
aas <- get_sector_fraction(c("Amino acid metabolism"), proteomics, annotation, "X1")
nts <- get_sector_fraction(c("Nucleotide metabolism"), proteomics, annotation, "X1")
sectors <- list("Amino acid metabolism" = aas,
"Nucleotide metabolism" = nts)
plot_and_fit(sectors,
c_lim_samples$Growth.rate..1.h.,
ylim = c(0,0.15),
ylab = "Proteome fraction",
bquote("Growth rate"~ mu ~ (h^-1)))
rm(list=ls(all=TRUE))
library(RColorBrewer)
library(here)
require(dplyr)
directory <- paste0(here(), "/code")
setwd(directory)
annot_col <- "Annotated functional COG group (description)"
uniprot_col <- "Uniprot Accession"
metadata <- read.csv("../data/Schmidt_proteomics_table_s23.csv", skip=2, nrows = 26)
metadata <- metadata[metadata$Strain == "BW25113",]
rownames(metadata) <- metadata[,1]
proteomics_raw <- read.csv("../data/Schmidt_proteomics_table_s6.csv", skip=1)
start_index <- grep("Mass", colnames(proteomics_raw))
end_index <- grep("Coefficient", colnames(proteomics_raw)) - 1
colnames(proteomics_raw) <- proteomics_raw[1,]
proteomics_all <- proteomics_raw[2:nrow(proteomics_raw),]
gene_ids <- proteomics_raw$Bnumber
proteomics_masses <- proteomics_all[, start_index:end_index]
proteomics_masses[] <- lapply(proteomics_masses, as.numeric)
proteomics_masses$Bnumber <- proteomics_all$Bnumber
selected_conditions <- c("Glucose", "Acetate", "Fumarate", "Glucosamine",
"Glycerol", "Pyruvate", "Chemostat 0.5", "Chemostat 0.35",
"Chemostat 0.20", "Chemostat 0.12", "Xylose", "Mannose",
"Galactose ", "Succinate", "Fructose")
proteomics <- proteomics_masses[,selected_conditions]
proteomics <- proteomics %>%
group_by(proteomics_masses$Bnumber) %>%
summarise_all(list(sum=sum))
proteomics <- data.frame(proteomics)
rownames(proteomics) <- proteomics$`proteomics_masses.Bnumber`
proteomics <- proteomics[,2:ncol(proteomics)]
colnames(proteomics) <- selected_conditions
annotation <- read.csv("../data/ecoli_kegg_annotation.csv")
growth_rates <-  metadata[colnames(proteomics), "Growth.rate..h.1."]
volumes <- metadata[colnames(proteomics), "Single.cell.volume..fl.1"]
for(col in c("X0", "X1", "X2")){
new_col <- c()
for(row in 1:nrow(annotation)){
split <- unlist(strsplit(annotation[row, col], "', '"))
chosen <- split[sample.int(length(split), 1)] # select random group if there are multiple
new_col <- c(new_col, trimws(gsub("[^a-zA-Z \\s]", "", chosen)))
}
annotation[, col] <- new_col
}
get_sector_fraction <- function(targets, proteomics, annotation, level){
sector_sum <- data.frame()
for (target in targets){
target_rows <- annotation$X[annotation[level] == target]
target_sums <- colSums(proteomics[target_rows, ], na.rm = TRUE)
sector_sum <- rbind(sector_sum, target_sums)
}
summed_groups <- colSums(sector_sum, na.rm=TRUE)
fractions <- summed_groups/colSums(proteomics, na.rm=TRUE)
names(fractions) <- colnames(proteomics)
return(fractions)
}
plot_and_fit <- function(data, growth_rates, ylim, ylab, xlab){
if(length(data) > 8){
print("Too many groups")
return()
}
colors <- brewer.pal(8, "Dark2")
for(i in seq_along(data)){
group_data <- data[[names(data)[i]]]
plot(growth_rates, group_data, col = colors[i], pch=20, ylim=ylim, cex=1.5,
ylab = ylab, xlab = xlab, cex.lab = 1.3)
abline(lm(group_data~growth_rates), col = colors[i])
par(new=TRUE)
}
legend("topleft",
legend = names(data),
col = colors[1:length(data)], pch=20, cex=1.3)
par(new=FALSE)
}
##### Translation & ribosomal proteins ######
met <- get_sector_fraction(c("Metabolism"), proteomics, annotation, "X0")
info <- get_sector_fraction(c("Genetic Information Processing"), proteomics, annotation, "X0")
sectors <- list("Metabolism" = met,
"Genetic Information Processing" = info)
plot_and_fit(sectors,
growth_rates,
ylim = c(0,0.6),
ylab = "Proteome fraction",
bquote("Growth rate"~ mu ~ (h^-1)))
translation <- get_sector_fraction(c("Translation", "Folding sorting and degradation"), proteomics, annotation, "X1")
ribosomes <- get_sector_fraction(c("Ribosome PATHeco"), proteomics, annotation, "X2")
trna_synthetases <- get_sector_fraction(c("AminoacyltRNA biosynthesis PATHeco"), proteomics, annotation, "X2")
sectors <- list("Translation" = translation-trna_synthetases,
"Ribosomal proteins" = ribosomes,
"tRNA synthetases" = trna_synthetases)
plot_and_fit(sectors,
growth_rates,
ylim = c(0,0.4),
ylab = "Proteome fraction",
bquote("Growth rate"~ mu ~ (h^-1)))
carbs <- get_sector_fraction(c("Carbohydrate metabolism"), proteomics, annotation, "X1")
energy <- get_sector_fraction(c("Ribosome PATHeco"), proteomics, annotation, "X2")
sectors <- list("Carbohydrate metabolism" = carbs,
"Energy metabolism" = energy)
plot_and_fit(sectors,
growth_rates,
ylim = c(0,0.3),
ylab = "Proteome fraction",
bquote("Growth rate"~ mu ~ (h^-1)))
aas <- get_sector_fraction(c("Amino acid metabolism"), proteomics, annotation, "X1")
nts <- get_sector_fraction(c("Nucleotide metabolism"), proteomics, annotation, "X1")
sectors <- list("Amino acid metabolism" = aas,
"Nucleotide metabolism" = nts)
plot_and_fit(sectors,
growth_rates,
ylim = c(0,0.15),
ylab = "Proteome fraction",
bquote("Growth rate"~ mu ~ (h^-1)))
lip <- get_sector_fraction(c("Lipid metabolism"), proteomics, annotation, "X1")
sectors <- list("Lipid metabolism" = lip)
plot_and_fit(sectors,
growth_rates,
ylim = c(0,0.015),
ylab = "Proteome fraction",
bquote("Growth rate"~ mu ~ (h^-1)))
library(here)
directory <- paste0(here(), "/code")
setwd(directory)
ecocyc_annotation <- read.table("../data/All-genes-of-E.-coli-K-12-substr.-MG1655.txt")
head(ecocyc_annotation)
ecocyc_annotation <- read.table("../data/All-genes-of-E.-coli-K-12-substr.-MG1655.txt", sep = "\t")
head(ecocyc_annotation)
ecocyc_annotation <- read.table("../data/All-genes-of-E.-coli-K-12-substr.-MG1655.txt", sep = "\t", colnames=1)
ecocyc_annotation <- read.table("../data/All-genes-of-E.-coli-K-12-substr.-MG1655.txt", sep = "\t", header=TRUE)
head(ecocyc_annotation)
colnames(ecocyc_annotation) <- c("Name", "ID", "Product", "Pathways_1", "Pathways_2", "Pathways_3", "Pathways_4")
head(ecocyc_annotation)
ecocyc_annotation$Pathways_1
ecocyc_annotation$Pathways_2
ecocyc_annotation$Pathways_3
ecocyc_annotation$Pathways_4
ecocyc_annotation$Pathways_3
ecocyc_annotation <- complete.cases(ecocyc_annotation)
ecocyc_annotation$Pathways_3
ecocyc_annotation
ecocyc_annotation <- read.table("../data/All-genes-of-E.-coli-K-12-substr.-MG1655.txt", sep = "\t", header=TRUE)
colnames(ecocyc_annotation) <- c("Name", "ID", "Product", "Pathways_1", "Pathways_2", "Pathways_3", "Pathways_4")
ecocyc_annotation <- ecocyc_annotation[complete.cases(ecocyc_annotation),]
head(ecocyc_annotation)
ecocyc_annotation$Pathways_1
unique(ecocyc_annotation$Pathways_3)
unique(ecocyc_annotation$Pathways_4)
unique(ecocyc_annotation$Pathways_2)
ecocyc_annot <- read.table("../data/EcoCyc_GO_ecoli.txt", header = TRUE)
ecocyc_annot <- read.table("../data/EcoCyc_GO_ecoli.txt")
ecocyc_annot <- read.table("../data/EcoCyc_GO_ecoli.txt", sep = "\t", header=TRUE)
head(ecocyc_annot)
ecocyc_annot[1,]
ecocyc_annot[3,]
ecocyc_annot[,"New column"]
ecocyc_annot[,"New.column"]
ecocyc_annot <- read.table("../data/Ecocyc_ecoli_GO.txt", sep = "\t", header=TRUE)
ecocyc_annot <- read.table("../data/Ecocyc_ecoli_GO.txt", sep = "\t", header=TRUE)
ecocyc_annot <- read.table("../data/ecocyc_ecoli_GO.txt", sep = "\t", header=TRUE)
head(ecocyc_annot)
for(row in 1:nrow(ecocyc_annot)){
group <- row[1]
genes <- strsplit(group[2], " // ")
}
for(row in 1:nrow(ecocyc_annot)){
group <- row[1]
genes <- strsplit(row[2], " // ")
}
row[1]
for(row in 1:nrow(ecocyc_annot)){
group <- ecocyc_annot[row,1]
genes <- strsplit(ecocyc_annot[row,2], " // ")
}
group
genes
gene_annot <- list()
for(row in 1:nrow(ecocyc_annot)){
group <- ecocyc_annot[row,1]
genes <- strsplit(ecocyc_annot[row,2], " // ")
for(gene in genes){
gene_annot[[group]] <- c(gene_annot[[group]], group)
}
}
gene_annot
gene_annot <- list()
for(row in 1:nrow(ecocyc_annot)){
group <- ecocyc_annot[row,1]
genes <- strsplit(ecocyc_annot[row,2], " // ")
for(gene in genes){
gene_annot[[gene]] <- c(gene_annot[[gene]], group)
}
}
gene_annot <- list()
for(row in 1:nrow(ecocyc_annot)){
group <- ecocyc_annot[row,1]
genes <- strsplit(ecocyc_annot[row,2], " // ")
for(gene in genes){
error_check <- try({gene_annot[[gene]] <- c(gene_annot[[gene]], group)}, silent = TRUE)
if(class(error_check) == "try-error"){
print(paste("Solver error with xrp =", xrp))
gene_annot[[gene]] <- c(group)
}
}
}
gene_annot <- list()
for(row in 1:nrow(ecocyc_annot)){
group <- ecocyc_annot[row,1]
genes <- strsplit(ecocyc_annot[row,2], " // ")
for(gene in genes){
error_check <- try({gene_annot[[gene]] <- c(gene_annot[[gene]], group)}, silent = TRUE)
if(class(error_check) == "try-error"){
print(paste("Solver error with xrp ="))
gene_annot[[gene]] <- c(group)
}
}
}
error_check
if(class(error_check) == "try-error"){
print(paste("Solver error with xrp ="))
gene_annot[[gene]] <- c(group)
}
gene_annot[[gene]] <- c(group)
gene_annot[[gene]]
gene_annot
gene_annot[[gene]] <- 1
genes
gene_annot <- list()
for(row in 1:nrow(ecocyc_annot)){
group <- ecocyc_annot[row,1]
genes <- strsplit(ecocyc_annot[row,2], " // ")[[1]]
for(gene in genes){
error_check <- try({gene_annot[[gene]] <- c(gene_annot[[gene]], group)}, silent = TRUE)
if(class(error_check) == "try-error"){
print(paste("Solver error with xrp ="))
gene_annot[[gene]] <- c(group)
}
}
}
gene_annot
data.frame(gene_annot)
unlist(genes_annot)
unlist(gene_annot)
unlist(gene_annot)["cellular metabolic process"]
library(plyr)
df <- rbind.fill(lapply(gene_annot, data.frame))
# View the result
print(df)
# View the result
head(df)
gene_annot
ecocyc_annot$GO_term
ecocyc_annot <- read.table("../data/ecocyc_ecoli_GO.txt", sep = "\t", header=TRUE)
d17_groups <- c("translation", "lipid biosynthetic process",
"amino acid biosynthetic process", "nucleobase biosynthetic process",
"DNA-templated transcription", "DNA biosynthetic process",
"RNA processing", "generation of precursor metabolites and energy",
"glycolytic process", "tRNA aminoacylation")
gene_annot <- list()
for(row in 1:nrow(ecocyc_annot)){
group <- ecocyc_annot[row,1]
if(!group %in% d17_groups){
next
}
genes <- strsplit(ecocyc_annot[row,2], " // ")[[1]]
for(gene in genes){
error_check <- try({gene_annot[[gene]] <- c(gene_annot[[gene]], group)}, silent = TRUE)
if(class(error_check) == "try-error"){
gene_annot[[gene]] <- c(group)
}
}
}
gene_annot
library(here)
directory <- paste0(here(), "/code")
library(here)
directory <- paste0(here(), "/code")
directory <- paste0(here(), "/code")
library(here)
directory <- paste0(here(), "/code")
setwd(directory)
gene_annot <- list()
for(row in 1:nrow(ecocyc_annot)){
group <- ecocyc_annot[row,1]
if(!group %in% d17_groups){
next
}
genes <- strsplit(ecocyc_annot[row,2], " // ")[[1]]
for(gene in genes){
error_check <- try({gene_annot[[gene]] <- c(gene_annot[[gene]], group)}, silent = TRUE)
if(class(error_check) == "try-error"){
gene_annot[[gene]] <- c(group)
}
}
}
gene_annot
d17_groups <- c("translation", "lipid biosynthetic process",
"amino acid biosynthetic process", "nucleobase biosynthetic process",
"DNA-templated transcription", "DNA biosynthetic process",
"RNA processing", "generation of precursor metabolites and energy",
"tRNA aminoacylation")
gene_annot <- list()
for(row in 1:nrow(ecocyc_annot)){
group <- ecocyc_annot[row,1]
if(!group %in% d17_groups){
next
}
if(group=="RNA processing"){group <- "DNA-templated transcription"}
genes <- strsplit(ecocyc_annot[row,2], " // ")[[1]]
for(gene in genes){
error_check <- try({gene_annot[[gene]] <- c(gene_annot[[gene]], group)}, silent = TRUE)
if(class(error_check) == "try-error"){
gene_annot[[gene]] <- c(group)
}
}
}
data.frame(gene_annot)
gene_annot
length(names(gene))
length(names(gene_annot))
ecocyc_annot$GO_term
ribo_genes <- ecocyc_annot[ecocyc_annot$GO_term == "structural constituent of ribosome"]
ribo_genes <- ecocyc_annot[ecocyc_annot$GO_term == "structural constituent of ribosome", 2]
ribo_genes
ribo_genes <- strsplit(ribo_genes, " // ")[[1]]
ribo_genes
trna_syn <- ecocyc_annot[ecocyc_annot$GO_term == "tRNA aminoacylation", 2]
library(RColorBrewer)
library(here)
directory <- paste0(here(), "/code")
