setwd(directory)
modelname="A7simple"
suppressMessages(source("Readmodelods_v2.R"))
source("GBA_Kinetics.R")
opt_data <- read.csv("Results GBA/GBA Model A7simplei mean time (2.13s) results.csv", row.names = 1)
row <- 1
rho <- rho_cond[1]
x  <- x_cond[,1]
taus <- opt_data[row, grep("tau", colnames(opt_data))]
vs <- opt_data[row, grep("v\\.", colnames(opt_data))]
fs <- opt_data[row, grep("f\\.", colnames(opt_data))]
cint <- opt_data[row, which(colnames(opt_data)=="C"):which(colnames(opt_data)=="p")]
fint <- cint/rho
dtaus <- dtau(t(cint))
growth_rate <- opt_data[row, "mu"]
for(j in 1:length(vs)){
Mjp <- M["p",j]
local_cost <- growth_rate*taus[j]
local_benefit <- unlist(vs) %*% (dtaus %*% M[, j])
transport_benefit <- colSums(M)[j] * unlist(vs) %*% dtaus %*% unlist(fint)
print(paste(colnames(vs)[j],
"prot", Mjp,
"local cost", round(local_cost, 4),
"local benefit", round(local_benefit, 4),
"transport benefit", round(transport_benefit, 4),
"sum", round(Mjp  - local_cost - local_benefit + transport_benefit, 4)))
}
vs
library(here)
library(RColorBrewer)
modelname <- "A7simple"
data <- read.csv(paste0("../data/", modelname, "_protein_cost_test.csv"), row.names = 1)
plot_composition <- function(proteome, target_phi, colors = NULL,
main = "Proteome Composition",
ylab = "Composition",
xlab = "Proteome fraction",
legend=TRUE) {
# Dimensions
n <- nrow(proteome)
m <- ncol(proteome)
# Cumulative sum by row (used for stacking)
proteome <- proteome/rowSums(proteome)
y_cum <- t(apply(proteome[ncol(proteome):1], 1, cumsum))
# Base plot (empty)
plot(NA, xlim = c(0, max(target_phi)), ylim = c(0, 1), xlab = xlab, ylab = ylab, main = main)
# Bottom line (start from 0)
y_prev <- rep(0, length(target_phi))
# Draw polygons for each protein group
for (i in m:1) {
y_top <- y_cum[, i]
polygon(
c(target_phi, rev(target_phi)),
c(y_prev, rev(y_top)),
col = colors[i],
border = NA
)
}
# Add legend
legend("topright", legend = rev(colnames(proteome)), fill = colors, bty = "n", cex = 0.8)
}
for(protein in unique(data$protein)){
png(paste0("../figures/", modelname, "_", protein, ".png"),
type="cairo", units="cm",
width=22, height=5, res=300)
par(mfcol=c(1,4), mar = c(4,4,2,0.5))
one_prot <- data[data$protein == protein, ]
target_phi <- one_prot$phi
proteome <- one_prot[, grep("p\\.", colnames(one_prot))]
biomass <- one_prot[, 8:which(colnames(one_prot)=="p")]
mu <- one_prot$mu
plot(one_prot$phi, mu, xlim = c(0,  max(target_phi)), ylim = c(0,max(mu)),
pch=one_prot$shape,
main = protein,
xlab = "Proteome fraction", ylab="Growth rate")
plot(one_prot$phi/one_prot$phi[which.max(one_prot$mu)], mu,
xlim = c(0,  4), ylim = c(0,max(mu)),
pch=one_prot$shape,
xlab = "Expression relative to optimum", ylab="Growth rate")
colors <- brewer.pal(ncol(proteome), "Paired")
plot_composition(proteome, target_phi, colors, main="", ylab = "Proteome composition")
plot_composition(biomass, target_phi, colors, main="", ylab = "Biomass composition")
dev.off()
}
library(RColorBrewer)
library(here)
setwd(here())
data <- read.csv("data/A9dekel_dekel.csv", row.names = 1)
par(mar = c(4,4,1,1), mfrow = c(1,2))
# Make a discrete palette
x_C2_vals <- sort(unique(data$x_C2))
cols <- setNames(brewer.pal(length(x_C2_vals), "Set1"), x_C2_vals)
for(kcat in unique(data$kcat)){
one_kcat <- data[data$kcat == kcat,]
ref <- one_kcat[one_kcat$x_C2 == min(one_kcat$x_C2), "mu"]
for(x_C2_val in unique(one_kcat$x_C2)){
one_c <- one_kcat[one_kcat$x_C2 == x_C2_val, "mu"]
one_kcat[one_kcat$x_C2 == x_C2_val, "benefit"] <- one_c - ref
}
# Assign colors based on discrete x_C2 values
point_cols <- cols[as.character(one_kcat$x_C2)]
plot(mu ~ phi, data = one_kcat, ylab = "Growth rate", col = point_cols, pch = 16)
plot(benefit ~ phi, data = one_kcat, ylab = "Benefit", col = point_cols, pch = 16)
legend("topright", legend = x_C2_vals, col = cols, pch = 16, title = "x_C2")
}
library(RColorBrewer)
library(here)
setwd(here())
data <- read.csv("data/A9dekel2_dekel.csv", row.names = 1)
par(mar = c(4,4,1,1), mfrow = c(1,2))
# Make a discrete palette
x_C2_vals <- sort(unique(data$x_C2))
cols <- setNames(brewer.pal(length(x_C2_vals), "Set1"), x_C2_vals)
for(kcat in unique(data$kcat)){
one_kcat <- data[data$kcat == kcat,]
ref <- one_kcat[one_kcat$x_C2 == min(one_kcat$x_C2), "mu"]
for(x_C2_val in unique(one_kcat$x_C2)){
one_c <- one_kcat[one_kcat$x_C2 == x_C2_val, "mu"]
one_kcat[one_kcat$x_C2 == x_C2_val, "benefit"] <- one_c - ref
}
# Assign colors based on discrete x_C2 values
point_cols <- cols[as.character(one_kcat$x_C2)]
plot(mu ~ phi, data = one_kcat, ylab = "Growth rate", col = point_cols, pch = 16)
plot(benefit ~ phi, data = one_kcat, ylab = "Benefit", col = point_cols, pch = 16)
legend("topright", legend = x_C2_vals, col = cols, pch = 16, title = "x_C2")
}
data
K
reactant
which(reactant == "C")
rm(list=ls(all=TRUE))
library(here)
directory <- paste0(here(), "/code")
#setwd(directory)
#setwd("C:/Users/dajas/RiboComp_GBA/RiboComp_GBA/code")
setwd("~/RiboComp_GBA/code")
source("Interface.R")
modelnames <- c("A9dekel2")#, "A5", "A9ferm4", "A17") #"A9ferm4" A11 "A17", A9_r_inh c("A5", "A7", "A8", "A10")
for(m in modelnames){
print(paste0("Running ", m))
modelname_orig <- m
keep_ribosome_kcat <- FALSE
keep_transport_kcat <- FALSE
rescale_kcats <- TRUE
fer_res_factor <- 10
maintenance_fun <- "constant"
modelname <- modelname_orig
GBA(modelname, 0, 0)
}
library(RColorBrewer)
library(here)
setwd(here())
data <- read.csv("data/A9dekel2_dekel.csv", row.names = 1)
par(mar = c(4,4,1,1), mfrow = c(1,2))
# Make a discrete palette
x_C2_vals <- sort(unique(data$x_C2))
cols <- setNames(brewer.pal(length(x_C2_vals), "Set1"), x_C2_vals)
for(kcat in unique(data$kcat)){
one_kcat <- data[data$kcat == kcat,]
ref <- one_kcat[one_kcat$x_C2 == min(one_kcat$x_C2), "mu"]
for(x_C2_val in unique(one_kcat$x_C2)){
one_c <- one_kcat[one_kcat$x_C2 == x_C2_val, "mu"]
one_kcat[one_kcat$x_C2 == x_C2_val, "benefit"] <- one_c - ref
}
# Assign colors based on discrete x_C2 values
point_cols <- cols[as.character(one_kcat$x_C2)]
plot(mu ~ phi, data = one_kcat, ylab = "Growth rate", col = point_cols, pch = 16)
plot(benefit ~ phi, data = one_kcat, ylab = "Benefit", col = point_cols, pch = 16)
legend("topright", legend = x_C2_vals, col = cols, pch = 16, title = "x_C2")
}
library(RColorBrewer)
library(here)
setwd(here())
data <- read.csv("data/A9dekel2_dekel.csv", row.names = 1)
par(mar = c(4,4,1,1), mfrow = c(1,2))
# Make a discrete palette
x_C2_vals <- sort(unique(data$x_C2))
cols <- setNames(brewer.pal(length(x_C2_vals), "Set1"), x_C2_vals)
for(kcat in unique(data$kcat)){
one_kcat <- data[data$kcat == kcat,]
ref <- one_kcat[one_kcat$x_C2 == min(one_kcat$x_C2), "mu"]
for(x_C2_val in unique(one_kcat$x_C2)){
one_c <- one_kcat[one_kcat$x_C2 == x_C2_val, "mu"]
one_kcat[one_kcat$x_C2 == x_C2_val, "benefit"] <- one_c - ref
}
# Assign colors based on discrete x_C2 values
point_cols <- cols[as.character(one_kcat$x_C2)]
plot(mu ~ phi, data = one_kcat, ylab = "Growth rate", col = point_cols, pch = 16)
plot(benefit ~ phi, data = one_kcat, ylab = "Benefit", col = point_cols, pch = 16)
legend("topright", legend = x_C2_vals, col = cols, pch = 16, title = "x_C2")
}
rm(list=ls(all=TRUE))
library(viridis)
library(here)
library(RColorBrewer)
library('rstudioapi')
library('readODS')
library('nloptr')
library('lpSolve')
directory <- paste0(here(), "/code")
setwd(directory)
is.reversible <- 0
predict.parameters <- 0
modelname <- "A9dekel2"
suppressMessages(source("Readmodelods_v2.R"))
rho_cond <- rho_cond[1]
n_conditions <- 1
phis_to_test <- c(0.001, seq(0.01, 0.2, 0.01))
kcats_to_test <- c(50, 150)
alt_concentrations <- c(1e-4, 0.005, 0.2)
# get optimal solution
source("GBA_Kinetics.R")
source('f0_alt.R')
#source("Parameter_prediction.R")
source("GBA_solver.R")
library(RColorBrewer)
library(here)
setwd(here())
data <- read.csv("data/A9dekel2_dekel.csv", row.names = 1)
par(mar = c(4,4,1,1), mfrow = c(1,2))
# Make a discrete palette
x_C2_vals <- sort(unique(data$x_C2))
cols <- setNames(brewer.pal(length(x_C2_vals), "Set1"), x_C2_vals)
for(kcat in unique(data$kcat)){
one_kcat <- data[data$kcat == kcat,]
ref <- one_kcat[one_kcat$x_C2 == min(one_kcat$x_C2), "mu"]
for(x_C2_val in unique(one_kcat$x_C2)){
one_c <- one_kcat[one_kcat$x_C2 == x_C2_val, "mu"]
one_kcat[one_kcat$x_C2 == x_C2_val, "benefit"] <- one_c - ref
}
# Assign colors based on discrete x_C2 values
point_cols <- cols[as.character(one_kcat$x_C2)]
plot(mu ~ phi, data = one_kcat, ylab = "Growth rate", col = point_cols, pch = 16)
plot(benefit ~ phi, data = one_kcat, ylab = "Benefit", col = point_cols, pch = 16)
legend("topright", legend = x_C2_vals, col = cols, pch = 16, title = "x_C2")
}
rm(list=ls(all=TRUE))
library(viridis)
library(here)
library(RColorBrewer)
library('rstudioapi')
library('readODS')
library('nloptr')
library('lpSolve')
directory <- paste0(here(), "/code")
setwd(directory)
is.reversible <- 0
predict.parameters <- 0
modelname <- "A9dekel2"
suppressMessages(source("Readmodelods_v2.R"))
rho_cond <- rho_cond[1]
n_conditions <- 1
phis_to_test <- c(0.001, seq(0.01, 0.2, 0.01))
kcats_to_test <- c(1, 150)
alt_concentrations <- c(0.2)
# get optimal solution
source("GBA_Kinetics.R")
source('f0_alt.R')
#source("Parameter_prediction.R")
source("GBA_solver.R")
library(RColorBrewer)
library(here)
setwd(here())
data <- read.csv("data/A9dekel2_dekel.csv", row.names = 1)
par(mar = c(4,4,1,1), mfrow = c(1,2))
# Make a discrete palette
x_C2_vals <- sort(unique(data$x_C2))
cols <- setNames(brewer.pal(length(x_C2_vals), "Set1"), x_C2_vals)
for(kcat in unique(data$kcat)){
one_kcat <- data[data$kcat == kcat,]
ref <- one_kcat[one_kcat$x_C2 == min(one_kcat$x_C2), "mu"]
for(x_C2_val in unique(one_kcat$x_C2)){
one_c <- one_kcat[one_kcat$x_C2 == x_C2_val, "mu"]
one_kcat[one_kcat$x_C2 == x_C2_val, "benefit"] <- one_c - ref
}
# Assign colors based on discrete x_C2 values
point_cols <- cols[as.character(one_kcat$x_C2)]
plot(mu ~ phi, data = one_kcat, ylab = "Growth rate", col = point_cols, pch = 16)
plot(benefit ~ phi, data = one_kcat, ylab = "Benefit", col = point_cols, pch = 16)
legend("topright", legend = x_C2_vals, col = cols, pch = 16, title = "x_C2")
}
library(RColorBrewer)
library(here)
setwd(here())
data <- read.csv("data/A9dekel20_dekel.csv", row.names = 1)
par(mar = c(4,4,1,1), mfrow = c(1,2))
# Make a discrete palette
x_C2_vals <- sort(unique(data$x_C2))
cols <- setNames(brewer.pal(length(x_C2_vals), "Set1"), x_C2_vals)
for(kcat in unique(data$kcat)){
one_kcat <- data[data$kcat == kcat,]
ref <- one_kcat[one_kcat$x_C2 == min(one_kcat$x_C2), "mu"]
for(x_C2_val in unique(one_kcat$x_C2)){
one_c <- one_kcat[one_kcat$x_C2 == x_C2_val, "mu"]
one_kcat[one_kcat$x_C2 == x_C2_val, "benefit"] <- one_c - ref
}
# Assign colors based on discrete x_C2 values
point_cols <- cols[as.character(one_kcat$x_C2)]
plot(mu ~ phi, data = one_kcat, ylab = "Growth rate", col = point_cols, pch = 16)
plot(benefit ~ phi, data = one_kcat, ylab = "Benefit", col = point_cols, pch = 16)
legend("topright", legend = x_C2_vals, col = cols, pch = 16, title = "x_C2")
}
library(RColorBrewer)
library(here)
setwd(here())
data <- read.csv("data/A9dekel20_dekel.csv", row.names = 1)
par(mar = c(4,4,1,1), mfrow = c(1,2))
# Make a discrete palette
x_C2_vals <- sort(unique(data$x_C2))
cols <- setNames(brewer.pal(length(x_C2_vals), "Set1"), x_C2_vals)
for(kcat in unique(data$kcat)){
one_kcat <- data[data$kcat == kcat,]
ref <- one_kcat[one_kcat$x_C2 == min(one_kcat$x_C2), "mu"]
for(x_C2_val in unique(one_kcat$x_C2)){
one_c <- one_kcat[one_kcat$x_C2 == x_C2_val, "mu"]
one_kcat[one_kcat$x_C2 == x_C2_val, "benefit"] <- one_c - ref
}
# Assign colors based on discrete x_C2 values
point_cols <- cols[as.character(one_kcat$x_C2)]
plot(mu ~ phi, data = one_kcat, ylab = "Growth rate", col = point_cols, pch = 16)
plot(benefit ~ phi, data = one_kcat, ylab = "Benefit", col = point_cols, pch = 16)
legend("topright", legend = x_C2_vals, col = cols, pch = 16, title = "x_C2")
}
library(RColorBrewer)
library(here)
setwd(here())
data <- read.csv("data/A8dekel0_dekel.csv", row.names = 1)
par(mar = c(4,4,1,1), mfrow = c(1,2))
# Make a discrete palette
x_C2_vals <- sort(unique(data$x_C2))
cols <- setNames(brewer.pal(length(x_C2_vals), "Set1"), x_C2_vals)
for(kcat in unique(data$kcat)){
one_kcat <- data[data$kcat == kcat,]
ref <- one_kcat[one_kcat$x_C2 == min(one_kcat$x_C2), "mu"]
for(x_C2_val in unique(one_kcat$x_C2)){
one_c <- one_kcat[one_kcat$x_C2 == x_C2_val, "mu"]
one_kcat[one_kcat$x_C2 == x_C2_val, "benefit"] <- one_c - ref
}
# Assign colors based on discrete x_C2 values
point_cols <- cols[as.character(one_kcat$x_C2)]
plot(mu ~ phi, data = one_kcat, ylab = "Growth rate", col = point_cols, pch = 16)
plot(benefit ~ phi, data = one_kcat, ylab = "Benefit", col = point_cols, pch = 16)
legend("topright", legend = x_C2_vals, col = cols, pch = 16, title = "x_C2")
}
library(RColorBrewer)
library(here)
setwd(here())
data <- read.csv("data/A8dekel1_dekel.csv", row.names = 1)
par(mar = c(4,4,1,1), mfrow = c(1,2))
# Make a discrete palette
x_C2_vals <- sort(unique(data$x_C2))
cols <- setNames(brewer.pal(length(x_C2_vals), "Set1"), x_C2_vals)
for(kcat in unique(data$kcat)){
one_kcat <- data[data$kcat == kcat,]
ref <- one_kcat[one_kcat$x_C2 == min(one_kcat$x_C2), "mu"]
for(x_C2_val in unique(one_kcat$x_C2)){
one_c <- one_kcat[one_kcat$x_C2 == x_C2_val, "mu"]
one_kcat[one_kcat$x_C2 == x_C2_val, "benefit"] <- one_c - ref
}
# Assign colors based on discrete x_C2 values
point_cols <- cols[as.character(one_kcat$x_C2)]
plot(mu ~ phi, data = one_kcat, ylab = "Growth rate", col = point_cols, pch = 16)
plot(benefit ~ phi, data = one_kcat, ylab = "Benefit", col = point_cols, pch = 16)
legend("topright", legend = x_C2_vals, col = cols, pch = 16, title = "x_C2")
}
library(RColorBrewer)
library(here)
setwd(here())
data <- read.csv("data/A8dekel1_dekel.csv", row.names = 1)
par(mar = c(4,4,1,1), mfrow = c(1,2))
# Make a discrete palette
x_C2_vals <- sort(unique(data$x_C2))
cols <- setNames(brewer.pal(length(x_C2_vals), "Set1"), x_C2_vals)
for(kcat in unique(data$kcat)){
one_kcat <- data[data$kcat == kcat,]
ref <- one_kcat[one_kcat$x_C2 == min(one_kcat$x_C2), "mu"]
for(x_C2_val in unique(one_kcat$x_C2)){
one_c <- one_kcat[one_kcat$x_C2 == x_C2_val, "mu"]
one_kcat[one_kcat$x_C2 == x_C2_val, "benefit"] <- one_c - ref
}
# Assign colors based on discrete x_C2 values
point_cols <- cols[as.character(one_kcat$x_C2)]
plot(mu ~ phi, data = one_kcat, ylab = "Growth rate", col = point_cols, pch = 16)
plot(benefit ~ phi, data = one_kcat, ylab = "Benefit", col = point_cols, pch = 16)
legend("topright", legend = x_C2_vals, col = cols, pch = 16, title = "x_C2")
}
library(RColorBrewer)
library(here)
setwd(here())
data <- read.csv("data/A8dekel1_dekel.csv", row.names = 1)
par(mar = c(4,4,1,1), mfrow = c(1,2))
# Make a discrete palette
x_C2_vals <- sort(unique(data$x_C2))
cols <- setNames(brewer.pal(length(x_C2_vals), "Set1"), x_C2_vals)
for(kcat in unique(data$kcat)){
one_kcat <- data[data$kcat == kcat,]
ref <- one_kcat[one_kcat$x_C2 == min(one_kcat$x_C2), "mu"]
for(x_C2_val in unique(one_kcat$x_C2)){
one_c <- one_kcat[one_kcat$x_C2 == x_C2_val, "mu"]
one_kcat[one_kcat$x_C2 == x_C2_val, "benefit"] <- one_c - ref
}
# Assign colors based on discrete x_C2 values
point_cols <- cols[as.character(one_kcat$x_C2)]
plot(mu ~ phi, data = one_kcat, ylab = "Growth rate", col = point_cols, pch = 16)
plot(benefit ~ phi, data = one_kcat, ylab = "Benefit", col = point_cols, pch = 16)
legend("topright", legend = x_C2_vals, col = cols, pch = 16, title = "x_C2")
}
library(RColorBrewer)
library(here)
setwd(here())
data <- read.csv("data/A8dekel0_dekel.csv", row.names = 1)
par(mar = c(4,4,1,1), mfrow = c(1,2))
# Make a discrete palette
x_C2_vals <- sort(unique(data$x_C2))
cols <- setNames(brewer.pal(length(x_C2_vals), "Set1"), x_C2_vals)
for(kcat in unique(data$kcat)){
one_kcat <- data[data$kcat == kcat,]
ref <- one_kcat[one_kcat$x_C2 == min(one_kcat$x_C2), "mu"]
for(x_C2_val in unique(one_kcat$x_C2)){
one_c <- one_kcat[one_kcat$x_C2 == x_C2_val, "mu"]
one_kcat[one_kcat$x_C2 == x_C2_val, "benefit"] <- one_c - ref
}
# Assign colors based on discrete x_C2 values
point_cols <- cols[as.character(one_kcat$x_C2)]
plot(mu ~ phi, data = one_kcat, ylab = "Growth rate", col = point_cols, pch = 16)
plot(benefit ~ phi, data = one_kcat, ylab = "Benefit", col = point_cols, pch = 16)
legend("topright", legend = x_C2_vals, col = cols, pch = 16, title = "x_C2")
}
library(RColorBrewer)
library(here)
setwd(here())
data <- read.csv("data/A8dekel1_dekel.csv", row.names = 1)
par(mar = c(4,4,1,1), mfrow = c(1,2))
# Make a discrete palette
x_C2_vals <- sort(unique(data$x_C2))
cols <- setNames(brewer.pal(length(x_C2_vals), "Set1"), x_C2_vals)
for(kcat in unique(data$kcat)){
one_kcat <- data[data$kcat == kcat,]
ref <- one_kcat[one_kcat$x_C2 == min(one_kcat$x_C2), "mu"]
for(x_C2_val in unique(one_kcat$x_C2)){
one_c <- one_kcat[one_kcat$x_C2 == x_C2_val, "mu"]
one_kcat[one_kcat$x_C2 == x_C2_val, "benefit"] <- one_c - ref
}
# Assign colors based on discrete x_C2 values
point_cols <- cols[as.character(one_kcat$x_C2)]
plot(mu ~ phi, data = one_kcat, ylab = "Growth rate", col = point_cols, pch = 16)
plot(benefit ~ phi, data = one_kcat, ylab = "Benefit", col = point_cols, pch = 16)
legend("topright", legend = x_C2_vals, col = cols, pch = 16, title = "x_C2")
}
library(RColorBrewer)
library(here)
setwd(here())
data <- read.csv("data/A8dekel1_dekel.csv", row.names = 1)
par(mar = c(4,4,1,1), mfrow = c(1,2))
# Make a discrete palette
x_C2_vals <- sort(unique(data$x_C2))
cols <- setNames(brewer.pal(length(x_C2_vals), "Set1"), x_C2_vals)
for(kcat in unique(data$kcat)){
one_kcat <- data[data$kcat == kcat,]
ref <- one_kcat[one_kcat$x_C2 == min(one_kcat$x_C2), "mu"]
for(x_C2_val in unique(one_kcat$x_C2)){
one_c <- one_kcat[one_kcat$x_C2 == x_C2_val, "mu"]
one_kcat[one_kcat$x_C2 == x_C2_val, "benefit"] <- one_c - ref
}
# Assign colors based on discrete x_C2 values
point_cols <- cols[as.character(one_kcat$x_C2)]
plot(mu ~ phi, data = one_kcat, ylab = "Growth rate", col = point_cols, pch = 16)
plot(benefit ~ phi, data = one_kcat, ylab = "Benefit", col = point_cols, pch = 16)
legend("topright", legend = x_C2_vals, col = cols, pch = 16, title = "x_C2")
}
library(RColorBrewer)
library(here)
setwd(here())
data <- read.csv("data/A8dekel0_dekel.csv", row.names = 1)
par(mar = c(4,4,1,1), mfrow = c(1,2))
# Make a discrete palette
x_C2_vals <- sort(unique(data$x_C2))
cols <- setNames(brewer.pal(length(x_C2_vals), "Set1"), x_C2_vals)
for(kcat in unique(data$kcat)){
one_kcat <- data[data$kcat == kcat,]
ref <- one_kcat[one_kcat$x_C2 == min(one_kcat$x_C2), "mu"]
for(x_C2_val in unique(one_kcat$x_C2)){
one_c <- one_kcat[one_kcat$x_C2 == x_C2_val, "mu"]
one_kcat[one_kcat$x_C2 == x_C2_val, "benefit"] <- one_c - ref
}
# Assign colors based on discrete x_C2 values
point_cols <- cols[as.character(one_kcat$x_C2)]
plot(mu ~ phi, data = one_kcat, ylab = "Growth rate", col = point_cols, pch = 16)
plot(benefit ~ phi, data = one_kcat, ylab = "Benefit", col = point_cols, pch = 16)
legend("topright", legend = x_C2_vals, col = cols, pch = 16, title = "x_C2")
}
library(RColorBrewer)
library(here)
setwd(here())
data <- read.csv("data/A8dekel1_dekel.csv", row.names = 1)
par(mar = c(4,4,1,1), mfrow = c(1,2))
# Make a discrete palette
x_C2_vals <- sort(unique(data$x_C2))
cols <- setNames(brewer.pal(length(x_C2_vals), "Set1"), x_C2_vals)
for(kcat in unique(data$kcat)){
one_kcat <- data[data$kcat == kcat,]
ref <- one_kcat[one_kcat$x_C2 == min(one_kcat$x_C2), "mu"]
for(x_C2_val in unique(one_kcat$x_C2)){
one_c <- one_kcat[one_kcat$x_C2 == x_C2_val, "mu"]
one_kcat[one_kcat$x_C2 == x_C2_val, "benefit"] <- one_c - ref
}
# Assign colors based on discrete x_C2 values
point_cols <- cols[as.character(one_kcat$x_C2)]
plot(mu ~ phi, data = one_kcat, ylab = "Growth rate", col = point_cols, pch = 16)
plot(benefit ~ phi, data = one_kcat, ylab = "Benefit", col = point_cols, pch = 16)
legend("topright", legend = x_C2_vals, col = cols, pch = 16, title = "x_C2")
}
K
